{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAGMC,EAAOC,SAASC,cAAc,SAGhCC,EAAa,CACfC,MAAO,EACPC,KAAM,EACNC,OAAQ,GAUV,SAASC,EAAiBC,GACxB,IAAwBC,EAAAD,EAAEE,OAAlBC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MACdT,EAAWQ,GAAQC,EARrBZ,EAAKa,SAAgB,MAAEC,iBAAiB,QAASP,GACjDP,EAAKa,SAAe,KAAEC,iBAAiB,QAASP,GAChDP,EAAKa,SAAiB,OAAEC,iBAAiB,QAASP,GAClDP,EAAKc,iBAAiB,UAQtB,SAAwBN,GACtBA,EAAEO,iBAEF,IAAQC,EAAwBb,EAAxBC,MAAOC,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,OAErBW,YAAW,WAGT,sBACEA,YAAW,WAUf,IAAuBC,EAAUd,EACzBe,GADeD,EATHE,EASahB,EATViB,EAUfF,EAAgBG,KAAKC,SAAW,GAE/B,IAAIC,SAAQ,SAACC,EAASC,GACvBP,EACFM,EAAQ,CAAEP,SAAAA,EAAUd,MAAAA,IAEpBsB,EAAO,CAAER,SAAAA,EAAUd,MAAAA,QAfhBuB,MAAK,SAAAC,OAAGV,EAAQU,EAARV,SAAUd,EAAKwB,EAALxB,aAAYyB,EAAA/B,GAASgC,OAAOC,QAAS,uBAAuCC,OAAfd,EAAS,QAAYc,OAAN5B,EAAM,UAClG6B,OAAI,SAAAL,OAAGV,EAAQU,EAARV,SAAUd,EAAKwB,EAALxB,aAAYyB,EAAA/B,GAASgC,OAAOI,QAAS,sBAAoCF,OAAfd,EAAS,QAAYc,OAAN5B,EAAM,UAErGiB,GAAgBc,OAAO9B,KACtBA,EAAOe,IATRC,EAAec,OAAOnB,GAEjBoB,EAAI,EAAGA,GAAK9B,EAAQ8B,GAAK,EAACC,EAAAD,KASlCpB","sources":["src/js/03-promises.js"],"sourcesContent":["// Import\nimport Notiflix from 'notiflix';\n\n// Variables\nconst form = document.querySelector('.form')\n\n// Object \nlet formValues = {\n  delay: 0,\n  step: 0,\n  amount: 0,\n};\n\n// Listeners\nform.elements['delay'].addEventListener('input', handleFormUpdate)\nform.elements['step'].addEventListener('input', handleFormUpdate)\nform.elements['amount'].addEventListener('input', handleFormUpdate)\nform.addEventListener('submit', handlePromises);\n\n//Functions\nfunction handleFormUpdate(e) {\n  const { name, value } = e.target;\n  formValues[name] = value;\n}\n\nfunction handlePromises(e) {\n  e.preventDefault();\n\n  const { delay, step, amount } = formValues;\n\n  setTimeout(() => {\n    let delayCounter = Number(delay);\n\n    for (let i = 1; i <= amount; i += 1) {\n      setTimeout(() => {\n        createPromise(i, delayCounter)\n          .then(({ position, delay }) => Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n          .catch(({ position, delay }) => Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`))\n        \n        delayCounter += Number(step)\n      }, step * i);\n    }\n  }, delay);\n  \n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n    \n    return new Promise((resolve, reject) => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay })\n      }\n    })\n  }\n}"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$formValues","delay","step","amount","$ce04d3a99e08e73b$var$handleFormUpdate","e","_target","target","name","value","elements","addEventListener","preventDefault","delay1","setTimeout","position","shouldResolve","i","delayCounter","Math","random","Promise","resolve","reject","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","Number","i1","_loop"],"version":3,"file":"03-promises.93b78340.js.map"}