{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAOC,SAASC,cAAc,SAGpC,IAAIC,EAAa,CACfC,MAAO,EACPC,KAAM,EACNC,OAAQ,GAUV,SAASC,EAAiBC,GACxB,MAAMC,KAAEA,EAAIC,MAAEA,GAAUF,EAAEG,OAC1BR,EAAWM,GAAQC,EARrBV,EAAKY,SAAgB,MAAEC,iBAAiB,QAASN,GACjDP,EAAKY,SAAe,KAAEC,iBAAiB,QAASN,GAChDP,EAAKY,SAAiB,OAAEC,iBAAiB,QAASN,GAClDP,EAAKa,iBAAiB,UAQtB,SAAwBL,GACtBA,EAAEM,iBAEF,MAAQV,MAAAW,EAAKV,KAAEA,EAAIC,OAAEA,GAAWH,EAgBhC,SAASa,EAAcC,EAAUb,GAC/B,MAAMc,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,UAAEL,QAAUb,IAEpBmB,EAAO,UAAEN,QAAUb,OArBzBoB,YAAW,KACT,IAAIC,EAAeC,OAAOX,GAE1B,IAAK,IAAIY,EAAI,EAAGA,GAAKrB,EAAQqB,GAAK,EAChCH,YAAW,KACTR,EAAcW,EAAGF,GACdG,MAAK,EAACX,SAAEA,EAAQb,MAAEA,KAAYyB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAqBd,QAAiBb,SAAY4B,OACtG,EAAKf,SAAAA,EAAUb,MAAAA,KAAcyB,EAAA/B,GAAQgC,OAACG,QAAO,sBAAShB,QAA8Bb,SAEzFqB,GAAgBC,OAAOrB,KACtBA,EAAOsB,KAEXZ","sources":["src/js/03-promises.js"],"sourcesContent":["// Import\nimport Notiflix from 'notiflix';\n\n// Variables\nconst form = document.querySelector('.form')\n\n// Object \nlet formValues = {\n  delay: 0,\n  step: 0,\n  amount: 0,\n};\n\n// Listeners\nform.elements['delay'].addEventListener('input', handleFormUpdate)\nform.elements['step'].addEventListener('input', handleFormUpdate)\nform.elements['amount'].addEventListener('input', handleFormUpdate)\nform.addEventListener('submit', handlePromises);\n\n//Functions\nfunction handleFormUpdate(e) {\n  const { name, value } = e.target;\n  formValues[name] = value;\n}\n\nfunction handlePromises(e) {\n  e.preventDefault();\n\n  const { delay, step, amount } = formValues;\n\n  setTimeout(() => {\n    let delayCounter = Number(delay);\n\n    for (let i = 1; i <= amount; i += 1) {\n      setTimeout(() => {\n        createPromise(i, delayCounter)\n          .then(({ position, delay }) => Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n          .catch(({ position, delay }) => Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`))\n        \n        delayCounter += Number(step)\n      }, step * i);\n    }\n  }, delay);\n  \n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n    \n    return new Promise((resolve, reject) => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay })\n      }\n    })\n  }\n}"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$formValues","delay","step","amount","$47d4ff9957288465$var$handleFormUpdate","e","name","value","target","elements","addEventListener","preventDefault","delay1","createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delayCounter","Number","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.d0691633.js.map"}